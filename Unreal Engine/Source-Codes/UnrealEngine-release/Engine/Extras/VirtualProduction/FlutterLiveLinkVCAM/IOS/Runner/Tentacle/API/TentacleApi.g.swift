// Copyright Epic Games, Inc. All Rights Reserved.
// 
// This is an auto-generated file. See FlutterLiveLinkVCAM/pigeons/README for information on how to
// modify the original source and generate a new file.
// 
// Autogenerated from Pigeon (v14.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation
#if os(iOS)
import Flutter
#elseif os(macOS)
import FlutterMacOS
#else
#error("Unsupported platform.")
#endif

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)"
  ]
}

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

/// Types of Tentacle products.
enum TentacleProductId: Int {
  case generic = 0
  case syncE = 1
  case trackE = 2
}

/// Information about a Tentacle device. This only includes data which is expected to be requested infrequently, so it
/// excludes the time code, last seen time, etc.
///
/// Generated class from Pigeon that represents data sent in messages.
struct TentacleDeviceInfo {
  /// True if the device is generating timecodes.
  var bIsInGreenMode: Bool
  /// Whether the battery is charging.
  var bIsCharging: Bool
  /// Whether the device is generating drop-frame timecodes.
  var bIsDropFrame: Bool
  /// Current battery level in percent.
  var batteryLevel: Int64
  /// Frame rate of the timecodes generated by this device in frames per second.
  var frameRate: Double
  /// Device timestamp (seconds since boot) when the device was last detected.
  var lastSeenTimestamp: Double
  /// Index of the icon used to represent this device.
  var iconIndex: Int64
  /// Received signal strength in decibel-milliwatts.
  var signalStrength: Int64
  /// The type of Tentacle product.
  var productId: TentacleProductId
  /// Unique identifier string for the device.
  var identifier: String
  /// User-assigned name for the device.
  var name: String

  static func fromList(_ list: [Any?]) -> TentacleDeviceInfo? {
    let bIsInGreenMode = list[0] as! Bool
    let bIsCharging = list[1] as! Bool
    let bIsDropFrame = list[2] as! Bool
    let batteryLevel = list[3] is Int64 ? list[3] as! Int64 : Int64(list[3] as! Int32)
    let frameRate = list[4] as! Double
    let lastSeenTimestamp = list[5] as! Double
    let iconIndex = list[6] is Int64 ? list[6] as! Int64 : Int64(list[6] as! Int32)
    let signalStrength = list[7] is Int64 ? list[7] as! Int64 : Int64(list[7] as! Int32)
    let productId = TentacleProductId(rawValue: list[8] as! Int)!
    let identifier = list[9] as! String
    let name = list[10] as! String

    return TentacleDeviceInfo(
      bIsInGreenMode: bIsInGreenMode,
      bIsCharging: bIsCharging,
      bIsDropFrame: bIsDropFrame,
      batteryLevel: batteryLevel,
      frameRate: frameRate,
      lastSeenTimestamp: lastSeenTimestamp,
      iconIndex: iconIndex,
      signalStrength: signalStrength,
      productId: productId,
      identifier: identifier,
      name: name
    )
  }
  func toList() -> [Any?] {
    return [
      bIsInGreenMode,
      bIsCharging,
      bIsDropFrame,
      batteryLevel,
      frameRate,
      lastSeenTimestamp,
      iconIndex,
      signalStrength,
      productId.rawValue,
      identifier,
      name,
    ]
  }
}
private class TentacleHostApiCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
      case 128:
        return TentacleDeviceInfo.fromList(self.readValue() as! [Any?])
      default:
        return super.readValue(ofType: type)
    }
  }
}

private class TentacleHostApiCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? TentacleDeviceInfo {
      super.writeByte(128)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class TentacleHostApiCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return TentacleHostApiCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return TentacleHostApiCodecWriter(data: data)
  }
}

class TentacleHostApiCodec: FlutterStandardMessageCodec {
  static let shared = TentacleHostApiCodec(readerWriter: TentacleHostApiCodecReaderWriter())
}

/// API that receives messages about Tentacle devices in the host language.
///
/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol TentacleHostApi {
  /// Start scanning for Tentacle devices using BLE.
  /// Bluetooth permission must be acquired before calling this.
  func startScanning() throws
  /// Stop scanning for Tentacle devices using BLE.
  func stopScanning() throws
  /// Get the latest list of cached device information.
  func getCachedDeviceInfo() throws -> [TentacleDeviceInfo]
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class TentacleHostApiSetup {
  /// The codec used by TentacleHostApi.
  static var codec: FlutterStandardMessageCodec { TentacleHostApiCodec.shared }
  /// Sets up an instance of `TentacleHostApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: TentacleHostApi?) {
    /// Start scanning for Tentacle devices using BLE.
    /// Bluetooth permission must be acquired before calling this.
    let startScanningChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.live_link_vcam.TentacleHostApi.startScanning", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      startScanningChannel.setMessageHandler { _, reply in
        do {
          try api.startScanning()
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      startScanningChannel.setMessageHandler(nil)
    }
    /// Stop scanning for Tentacle devices using BLE.
    let stopScanningChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.live_link_vcam.TentacleHostApi.stopScanning", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      stopScanningChannel.setMessageHandler { _, reply in
        do {
          try api.stopScanning()
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      stopScanningChannel.setMessageHandler(nil)
    }
    /// Get the latest list of cached device information.
    let getCachedDeviceInfoChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.live_link_vcam.TentacleHostApi.getCachedDeviceInfo", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getCachedDeviceInfoChannel.setMessageHandler { _, reply in
        do {
          let result = try api.getCachedDeviceInfo()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      getCachedDeviceInfoChannel.setMessageHandler(nil)
    }
  }
}
/// API that receives messages about Tentacle devices in Flutter.
///
/// Generated protocol from Pigeon that represents Flutter messages that can be called from Swift.
protocol TentacleFlutterApiProtocol {
}
class TentacleFlutterApi: TentacleFlutterApiProtocol {
  private let binaryMessenger: FlutterBinaryMessenger
  init(binaryMessenger: FlutterBinaryMessenger){
    self.binaryMessenger = binaryMessenger
  }
}
