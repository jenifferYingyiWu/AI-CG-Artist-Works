// Copyright Epic Games, Inc. All Rights Reserved.
// 
// This is an auto-generated file. See FlutterLiveLinkVCAM/pigeons/README for information on how to
// modify the original source and generate a new file.
// 
// Autogenerated from Pigeon (v14.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation
#if os(iOS)
import Flutter
#elseif os(macOS)
import FlutterMacOS
#else
#error("Unsupported platform.")
#endif

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)"
  ]
}

private func createConnectionError(withChannelName channelName: String) -> FlutterError {
  return FlutterError(code: "channel-error", message: "Unable to establish connection on channel: '\(channelName)'.", details: "")
}

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

/// Inputs that can be reported in a [GamepadInputEvent].
enum GamepadInput: Int {
  case dpadUp = 0
  case dpadDown = 1
  case dpadLeft = 2
  case dpadRight = 3
  case faceButtonBottom = 4
  case faceButtonRight = 5
  case faceButtonLeft = 6
  case faceButtonTop = 7
  case shoulderButtonLeft = 8
  case shoulderButtonRight = 9
  case triggerButtonLeft = 10
  case triggerButtonRight = 11
  case thumbstickLeftButton = 12
  case thumbstickRightButton = 13
  case specialButtonLeft = 14
  case specialButtonRight = 15
  case triggerAxisLeft = 16
  case triggerAxisRight = 17
  case thumbstickLeftX = 18
  case thumbstickLeftY = 19
  case thumbstickRightX = 20
  case thumbstickRightY = 21
}

/// Types of input that can be reported in a [GamepadInputEvent].
enum GamepadInputType: Int {
  case button = 0
  case axis = 1
}

/// An event sent when a gamepad receives input.
///
/// Generated class from Pigeon that represents data sent in messages.
struct GamepadInputEvent {
  /// The identifier of the gamepad that received the input.
  var gamepadId: Int64
  /// The input received.
  var input: GamepadInput
  /// The type of input received.
  var type: GamepadInputType
  /// The value of the input.
  /// For buttons, this will be either 0 (unpressed) or 1 (pressed).
  /// For axes, this ranges from 0 to 1.
  var value: Double

  static func fromList(_ list: [Any?]) -> GamepadInputEvent? {
    let gamepadId = list[0] is Int64 ? list[0] as! Int64 : Int64(list[0] as! Int32)
    let input = GamepadInput(rawValue: list[1] as! Int)!
    let type = GamepadInputType(rawValue: list[2] as! Int)!
    let value = list[3] as! Double

    return GamepadInputEvent(
      gamepadId: gamepadId,
      input: input,
      type: type,
      value: value
    )
  }
  func toList() -> [Any?] {
    return [
      gamepadId,
      input.rawValue,
      type.rawValue,
      value,
    ]
  }
}
/// API that receives messages about gamepad input in the host language.
///
/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol GamepadHostApi {
  /// Get the current list of connected gamepad IDs.
  func getActiveGamepadIds() throws -> [Int64]
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class GamepadHostApiSetup {
  /// The codec used by GamepadHostApi.
  /// Sets up an instance of `GamepadHostApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: GamepadHostApi?) {
    /// Get the current list of connected gamepad IDs.
    let getActiveGamepadIdsChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.live_link_vcam.GamepadHostApi.getActiveGamepadIds", binaryMessenger: binaryMessenger)
    if let api = api {
      getActiveGamepadIdsChannel.setMessageHandler { _, reply in
        do {
          let result = try api.getActiveGamepadIds()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      getActiveGamepadIdsChannel.setMessageHandler(nil)
    }
  }
}
private class GamepadFlutterApiCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
      case 128:
        return GamepadInputEvent.fromList(self.readValue() as! [Any?])
      default:
        return super.readValue(ofType: type)
    }
  }
}

private class GamepadFlutterApiCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? GamepadInputEvent {
      super.writeByte(128)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class GamepadFlutterApiCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return GamepadFlutterApiCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return GamepadFlutterApiCodecWriter(data: data)
  }
}

class GamepadFlutterApiCodec: FlutterStandardMessageCodec {
  static let shared = GamepadFlutterApiCodec(readerWriter: GamepadFlutterApiCodecReaderWriter())
}

/// API that receives messages about gamepad input in Flutter.
///
/// Generated protocol from Pigeon that represents Flutter messages that can be called from Swift.
protocol GamepadFlutterApiProtocol {
  /// Called when a gamepad connects to the app.
  func onGamepadConnected(gamepadId gamepadIdArg: Int64, completion: @escaping (Result<Void, FlutterError>) -> Void)
  /// Called when a gamepad disconnects from the app.
  func onGamepadDisconnected(gamepadId gamepadIdArg: Int64, completion: @escaping (Result<Void, FlutterError>) -> Void)
  /// Called when a gamepad receives input.
  func onGamepadInputEvent(event eventArg: GamepadInputEvent, completion: @escaping (Result<Void, FlutterError>) -> Void)
}
class GamepadFlutterApi: GamepadFlutterApiProtocol {
  private let binaryMessenger: FlutterBinaryMessenger
  init(binaryMessenger: FlutterBinaryMessenger){
    self.binaryMessenger = binaryMessenger
  }
  var codec: FlutterStandardMessageCodec {
    return GamepadFlutterApiCodec.shared
  }
  /// Called when a gamepad connects to the app.
  func onGamepadConnected(gamepadId gamepadIdArg: Int64, completion: @escaping (Result<Void, FlutterError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.live_link_vcam.GamepadFlutterApi.onGamepadConnected"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([gamepadIdArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName:channelName)))
        return
      }
      if (listResponse.count > 1) {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(FlutterError(code: code, message: message, details: details)));
      } else {
        completion(.success(Void()))
      }
    }
  }
  /// Called when a gamepad disconnects from the app.
  func onGamepadDisconnected(gamepadId gamepadIdArg: Int64, completion: @escaping (Result<Void, FlutterError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.live_link_vcam.GamepadFlutterApi.onGamepadDisconnected"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([gamepadIdArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName:channelName)))
        return
      }
      if (listResponse.count > 1) {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(FlutterError(code: code, message: message, details: details)));
      } else {
        completion(.success(Void()))
      }
    }
  }
  /// Called when a gamepad receives input.
  func onGamepadInputEvent(event eventArg: GamepadInputEvent, completion: @escaping (Result<Void, FlutterError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.live_link_vcam.GamepadFlutterApi.onGamepadInputEvent"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([eventArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName:channelName)))
        return
      }
      if (listResponse.count > 1) {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(FlutterError(code: code, message: message, details: details)));
      } else {
        completion(.success(Void()))
      }
    }
  }
}
